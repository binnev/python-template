{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python project template","text":"<p>This project is a template for new python projects. It contains up-to-date tooling for tests, docs, versioning, and dependency management. </p> <p>In a nutshell, the idea is that you clone/fork this project, and then modify it to suit your new project. The Getting Started section provides a step-by-step guide. </p>"},{"location":"#documentation","title":"Documentation","text":"<p>To view the documentation, run:  <pre><code>mkdocs serve\n</code></pre> and go to localhost:8000 in your browser.</p> <p>The documentation provides a detailed guide to the project. It is structured using the Di\u00e1taxis framework to help you navigate and understand the project effectively. This framework consists of 4 categories:</p> <ol> <li>Tutorials: Guides that teach a concept.</li> <li>How-To Guides: Step-by-step instructions to achieve specific goals or tasks.</li> <li>Reference: Technical descriptions of the project's components and APIs.</li> <li>Explanations: In-depth discussions of concepts and motivations. </li> </ol>"},{"location":"explanation/aim/","title":"Aim of the Project","text":"<p>Setting up a new project can be time-consuming. As a result, people often copy-paste configuration from an existing project, including all the mistakes and outdated tools. </p> <p>This project serves as a cookie cutter template for starting new Python projects. It is designed to incorporate the most up-to-date tools and best practices, enabling developers to quickly set up a robust and modern Python development environment.</p>"},{"location":"explanation/structure/","title":"Project Structure","text":"<p>This document explains the structure of the Python Template project.</p>"},{"location":"explanation/structure/#overview","title":"Overview","text":"<p>The project is organized as follows:</p> <pre><code>python-template/\n\u251c\u2500\u2500 cli/                # Command-line interface\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 __main__.py\n\u2502   \u2514\u2500\u2500 calculator.py\n\u251c\u2500\u2500 core/               # Core functionality\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 calculator.py\n\u251c\u2500\u2500 tests/              # Unit tests\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_calculator.py\n\u2502   \u2514\u2500\u2500 test_async_stuff.py\n\u251c\u2500\u2500 docs/               # Documentation\n\u2502   \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 main.py             # Entry point\n\u251c\u2500\u2500 pyproject.toml      # Project configuration\n\u2514\u2500\u2500 README.md           # Project overview\n</code></pre>"},{"location":"explanation/structure/#key-components","title":"Key Components","text":"<ul> <li>CLI: Provides a command-line interface using <code>typer</code>.</li> <li>Core: Contains the core logic for the calculator.</li> <li>Tests: Includes unit tests for the project.</li> <li>Docs: Contains documentation files for the project.</li> </ul>"},{"location":"how-to/dependencies/","title":"Dependencies","text":"<p>Use <code>uv</code> -- it's basically a Cargo for python, written in rust</p> <p>Add a dependency:  <pre><code>uv add ruff\n</code></pre></p> <p>Add a dependency to the optional \"dev\" group:  <pre><code>uv add ruff --optional dev\n</code></pre></p> <p>Create a new lockfile:  <pre><code>uv lock \n</code></pre></p> <p>Pass <code>--upgrade</code> to upgrade:  <pre><code>uv lock --upgrade\n</code></pre></p> <p>Install dependencies: (this will only install the core dependencies) <pre><code>uv pip install -r pyproject.toml\n</code></pre></p> <p>Install extra dependencies defined in <code>project.optional-dependencies</code>: <pre><code>uv pip install -r pyproject.toml --all-extras\n</code></pre></p>"},{"location":"how-to/docs/","title":"Docs","text":""},{"location":"how-to/docs/#view-the-documentation-locally","title":"View the documentation locally:","text":"<p>Run:  <pre><code>mkdocs serve\n</code></pre> and go to <code>localhost:8000</code> to view the docs. Mkdocs hot-reloads the docs, so any changes you make will be immediately visible.</p>"},{"location":"how-to/docs/#versioning","title":"Versioning","text":"<p>We use <code>mike</code> to manage versioning for our documentation. It creates a snapshot of the documentation for each version of the project, allowing users to access the appropriate docs for the version they're using\u2014even if it's an older one.</p>"},{"location":"how-to/docs/#build-new-docs-version","title":"Build new docs version","text":"<p>Build the docs for the current project version:  <pre><code>mike deploy $(cz version --project)\n</code></pre></p> <p>Alias the new version of the docs to \"latest\" and set that as the default docs version. <pre><code>mike alias $(cz version --project) latest\nmike set-default latest\n</code></pre></p>"},{"location":"how-to/docs/#writing","title":"Writing","text":"<p>These are some tools you can use to enrich the documentation. </p>"},{"location":"how-to/docs/#diagrams","title":"Diagrams","text":"<p>Mermaid diagrams can be written in a <code>mermaid</code> code block, and they will be rendered as diagrams: </p> <p>Graphs:  <pre><code>graph LR\n    hello --&gt; world\n    world --&gt; again\n    again --&gt; hello</code></pre></p> <p>Sequence diagrams:  <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre></p> <p>Class diagrams: <pre><code>classDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()  \n  }</code></pre></p>"},{"location":"how-to/docs/#tooltips","title":"Tooltips","text":"<p>Tooltips and other such \"admonitions\" can be written with a <code>!!!</code> block: <pre><code>!!! note\n    This is a note.\n</code></pre></p> <p>Note</p> <p>This is a note.</p> <p>Tip</p> <p>This is a tip.</p> <p>Warning</p> <p>Be careful!</p> <p>Danger</p> <p>This is dangerous!</p>"},{"location":"how-to/docs/#code-blocks","title":"Code blocks","text":"<p>Specify python with the \"py\" shortcode after the 3 backticks. You can highlight lines too with <code>hl_lines=\"3-5\"</code></p> <pre><code>def divide(a: float, b: float) -&gt; float:\n    \"\"\"\n    Return the division of two numbers. Raise an error if dividing by zero.\n\n    Args:\n        a (float): The numerator.\n        b (float): The denominator.\n\n    Returns:\n        float: The result of the division.\n\n    Raises:\n        ValueError: If the denominator is zero.\n    \"\"\"\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    return a / b\n</code></pre> <p>Inline code blocks can be highlighted for specific languages by prefixing <code>#!python</code>: <code>lambda a: print(a)</code></p>"},{"location":"how-to/docs/#content-tabs","title":"Content tabs","text":"<p>Content tabs can be used to show different versions of something in a tabbed layout:</p> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <p>It doesn't have to be code: </p> Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol>"},{"location":"how-to/run-api/","title":"Running the API","text":"<p>Run the API with:  <pre><code>uvicorn src.api.app:app --reload\n</code></pre></p> <p>Then navigate to localhost:8000 to interact with the API. </p>"},{"location":"how-to/run-api/#debugging","title":"Debugging","text":"<p>Alternatively, you can run the \"FastAPI\" debug configuration in <code>.vscode/launch.json</code> to debug the application. </p>"},{"location":"how-to/run-cli/","title":"Running the CLI","text":"<p>Show the help with </p> <pre><code> python -m src.cli --help \n</code></pre> <p>It prints: </p> <pre><code> Usage: python -m src.cli [OPTIONS] COMMAND [ARGS]...                            \n\n Handles the --version flag                                                      \n\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --version             -v        Show the application's version and exit.      \u2502\n\u2502 --install-completion            Install completion for the current shell.     \u2502\n\u2502 --show-completion               Show completion for the current shell, to     \u2502\n\u2502                                 copy it or customize the installation.        \u2502\n\u2502 --help                          Show this message and exit.                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 add        Add two numbers.                                                   \u2502\n\u2502 subtract   Subtract two numbers.                                              \u2502\n\u2502 multiply   Multiply two numbers.                                              \u2502\n\u2502 divide     Divide two numbers. Args:     a (float): The numerator.     b      \u2502\n\u2502            (float): The denominator.                                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"how-to/run-cli/#example","title":"Example","text":"<pre><code>python -m src.cli add 420 69\n</code></pre> <p>result:  <pre><code>The result of addition is: 489.0\n</code></pre></p>"},{"location":"how-to/testing/","title":"Testing","text":""},{"location":"how-to/testing/#run-all-tests","title":"Run all tests","text":"<p>Running all tests should be as simple as this: <pre><code>pytest\n</code></pre></p>"},{"location":"how-to/testing/#run-specific-tests","title":"Run specific tests","text":"<p>Run only tests which have \"foo\" in the file or function name:  <pre><code>pytest -k foo\n</code></pre></p>"},{"location":"how-to/testing/#watch-tests","title":"Watch tests","text":"<p>To automatically re-run tests while you are working on them, use  <code>pytest-watcher</code> (<code>q</code> to quit): <pre><code>ptw .\n</code></pre></p> <p>You can also watch specific tests using the <code>-k</code> flag:  <pre><code>ptw . -k foo \n</code></pre></p> <p>By default, tests are re-run 0.2 seconds after the last file edit. To increase the delay, pass <code>--delay</code>:  <pre><code>ptw . --delay 5\n</code></pre></p>"},{"location":"how-to/testing/#getting-test-coverage","title":"Getting test coverage","text":""},{"location":"how-to/testing/#terminal","title":"Terminal","text":"<p>To see the test coverage, add <code>--cov</code> to any of the above commands. For example, this will output the coverage report to the terminal: <pre><code>pytest --cov\n</code></pre></p>"},{"location":"how-to/testing/#html-report","title":"HTML report","text":"<p>To see a browsable HTML report: <pre><code>pytest --cov --cov-report=html &amp;&amp; xdg-open htmlcov/index.html\n</code></pre></p> <p>You can watch HTML coverage by running:  <pre><code>ptw . --cov --cov-report=html\n</code></pre> and opening <code>htmlcov/index.html</code> in your browser. </p> <p>To watch coverage for a specific test:  <pre><code>ptw . -k foo --cov --cov-report=html\n</code></pre> The tests may \"fail\" because the tests matching <code>foo</code> will be expected to provide coverage for the whole project. But you can open <code>htmlcov/index.html</code> in your browser and browse to just the relevant file. </p>"},{"location":"how-to/versioning/","title":"Versioning","text":"<p>Use commitizen to automatically calculate version increments, based on Conventional Commit Messages and Semantic Versioning <pre><code>cz bump\n</code></pre></p>"},{"location":"reference/api/","title":"Calculator API","text":""},{"location":"reference/api/#src.api.calculator","title":"<code>src.api.calculator</code>","text":""},{"location":"reference/api/#src.api.calculator.add","title":"<code>add(a, b)</code>","text":"<p>Endpoint to add two numbers.</p> PARAMETER DESCRIPTION <code>a</code> <p>The first number to add.</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>The second number to add.</p> <p> TYPE: <code>float</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The result of the addition.</p> Source code in <code>src/api/calculator.py</code> <pre><code>@calculator_router.get(\"/add\")\ndef add(a: float, b: float):\n    \"\"\"\n    Endpoint to add two numbers.\n\n    Args:\n        a (float): The first number to add.\n        b (float): The second number to add.\n\n    Returns:\n        dict: The result of the addition.\n    \"\"\"\n    result = calculator.add(a, b)\n    return {\"result\": result}\n</code></pre>"},{"location":"reference/api/#src.api.calculator.subtract","title":"<code>subtract(a, b)</code>","text":"<p>Endpoint to subtract two numbers.</p> PARAMETER DESCRIPTION <code>a</code> <p>The number to subtract from.</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>The number to subtract.</p> <p> TYPE: <code>float</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The result of the subtraction.</p> Source code in <code>src/api/calculator.py</code> <pre><code>@calculator_router.get(\"/subtract\")\ndef subtract(a: float, b: float):\n    \"\"\"\n    Endpoint to subtract two numbers.\n\n    Args:\n        a (float): The number to subtract from.\n        b (float): The number to subtract.\n\n    Returns:\n        dict: The result of the subtraction.\n    \"\"\"\n    result = calculator.subtract(a, b)\n    return {\"result\": result}\n</code></pre>"},{"location":"reference/api/#src.api.calculator.multiply","title":"<code>multiply(a, b)</code>","text":"<p>Endpoint to multiply two numbers.</p> PARAMETER DESCRIPTION <code>a</code> <p>The first number to multiply.</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>The second number to multiply.</p> <p> TYPE: <code>float</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The result of the multiplication.</p> Source code in <code>src/api/calculator.py</code> <pre><code>@calculator_router.get(\"/multiply\")\ndef multiply(a: float, b: float):\n    \"\"\"\n    Endpoint to multiply two numbers.\n\n    Args:\n        a (float): The first number to multiply.\n        b (float): The second number to multiply.\n\n    Returns:\n        dict: The result of the multiplication.\n    \"\"\"\n    result = calculator.multiply(a, b)\n    return {\"result\": result}\n</code></pre>"},{"location":"reference/api/#src.api.calculator.divide","title":"<code>divide(a, b)</code>","text":"<p>Endpoint to divide two numbers.</p> PARAMETER DESCRIPTION <code>a</code> <p>The numerator.</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>The denominator.</p> <p> TYPE: <code>float</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The result of the division.</p> RAISES DESCRIPTION <code>HTTPException</code> <p>If division by zero is attempted.</p> Source code in <code>src/api/calculator.py</code> <pre><code>@calculator_router.get(\"/divide\")\ndef divide(a: float, b: float):\n    \"\"\"\n    Endpoint to divide two numbers.\n\n    Args:\n        a (float): The numerator.\n        b (float): The denominator.\n\n    Returns:\n        dict: The result of the division.\n\n    Raises:\n        HTTPException: If division by zero is attempted.\n    \"\"\"\n    try:\n        result = calculator.divide(a, b)\n        return {\"result\": result}\n    except ValueError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n</code></pre>"},{"location":"reference/cli/","title":"CLI Calculator Module","text":""},{"location":"reference/cli/#src.cli.calculator","title":"<code>src.cli.calculator</code>","text":"<p>This module provides CLI commands for performing basic arithmetic operations.</p> <p>It uses the <code>typer</code> library to define commands for addition, subtraction, multiplication, and division. Each command takes two numbers as input and prints the result to the console.</p> <p>The module relies on the <code>core.calculator</code> module for the actual arithmetic operations.</p>"},{"location":"reference/cli/#src.cli.calculator.add","title":"<code>add(a, b)</code>","text":"<p>Add two numbers.</p> PARAMETER DESCRIPTION <code>a</code> <p>The first number to add.</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>The second number to add.</p> <p> TYPE: <code>float</code> </p> Source code in <code>src/cli/calculator.py</code> <pre><code>@app.command()\ndef add(a: float, b: float) -&gt; None:\n    \"\"\"\n    Add two numbers.\n\n    Args:\n        a (float): The first number to add.\n        b (float): The second number to add.\n    \"\"\"\n    result = calculator.add(a, b)\n    typer.echo(f\"The result of addition is: {result}\")\n</code></pre>"},{"location":"reference/cli/#src.cli.calculator.subtract","title":"<code>subtract(a, b)</code>","text":"<p>Subtract two numbers.</p> PARAMETER DESCRIPTION <code>a</code> <p>The number to subtract from.</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>The number to subtract.</p> <p> TYPE: <code>float</code> </p> Source code in <code>src/cli/calculator.py</code> <pre><code>@app.command()\ndef subtract(a: float, b: float) -&gt; None:\n    \"\"\"\n    Subtract two numbers.\n\n    Args:\n        a (float): The number to subtract from.\n        b (float): The number to subtract.\n    \"\"\"\n    result = calculator.subtract(a, b)\n    typer.echo(f\"The result of subtraction is: {result}\")\n</code></pre>"},{"location":"reference/cli/#src.cli.calculator.multiply","title":"<code>multiply(a, b)</code>","text":"<p>Multiply two numbers.</p> PARAMETER DESCRIPTION <code>a</code> <p>The first number to multiply.</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>The second number to multiply.</p> <p> TYPE: <code>float</code> </p> Source code in <code>src/cli/calculator.py</code> <pre><code>@app.command()\ndef multiply(a: float, b: float) -&gt; None:\n    \"\"\"\n    Multiply two numbers.\n\n    Args:\n        a (float): The first number to multiply.\n        b (float): The second number to multiply.\n    \"\"\"\n    result = calculator.multiply(a, b)\n    typer.echo(f\"The result of multiplication is: {result}\")\n</code></pre>"},{"location":"reference/cli/#src.cli.calculator.divide","title":"<code>divide(a, b)</code>","text":"<p>Divide two numbers. Args:     a (float): The numerator.     b (float): The denominator.</p> Source code in <code>src/cli/calculator.py</code> <pre><code>@app.command()\ndef divide(a: float, b: float) -&gt; None:\n    \"\"\"\n    Divide two numbers.\n    Args:\n        a (float): The numerator.\n        b (float): The denominator.\n    \"\"\"\n    try:\n        result = calculator.divide(a, b)\n        typer.echo(f\"The result of division is: {result}\")\n    except ValueError as e:\n        typer.echo(f\"Error: {e}\")\n</code></pre>"},{"location":"reference/cli/#src.cli.calculator.main","title":"<code>main(version=typer.Option(None, '--version', '-v', help=\"Show the application's version and exit.\", callback=_version_callback, is_eager=True))</code>","text":"<p>Handles the --version flag</p> Source code in <code>src/cli/calculator.py</code> <pre><code>@app.callback()\ndef main(\n    version: Optional[bool] = typer.Option(\n        None,\n        \"--version\",\n        \"-v\",\n        help=\"Show the application's version and exit.\",\n        callback=_version_callback,\n        is_eager=True,\n    ),\n) -&gt; None:\n    \"\"\"Handles the --version flag\"\"\"\n    return\n</code></pre>"},{"location":"reference/core/","title":"Calculator Module","text":""},{"location":"reference/core/#src.core.calculator","title":"<code>src.core.calculator</code>","text":""},{"location":"reference/core/#src.core.calculator.add","title":"<code>add(a, b)</code>","text":"<p>Return the sum of two numbers.</p> PARAMETER DESCRIPTION <code>a</code> <p>The first number.</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>The second number.</p> <p> TYPE: <code>float</code> </p> RETURNS DESCRIPTION <code>float</code> <p>The sum of the two numbers.</p> <p> TYPE: <code>float</code> </p> Source code in <code>src/core/calculator.py</code> <pre><code>def add(a: float, b: float) -&gt; float:\n    \"\"\"\n    Return the sum of two numbers.\n\n    Args:\n        a (float): The first number.\n        b (float): The second number.\n\n    Returns:\n        float: The sum of the two numbers.\n    \"\"\"\n    return a + b\n</code></pre>"},{"location":"reference/core/#src.core.calculator.subtract","title":"<code>subtract(a, b)</code>","text":"<p>Return the difference of two numbers.</p> PARAMETER DESCRIPTION <code>a</code> <p>The first number.</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>The second number.</p> <p> TYPE: <code>float</code> </p> RETURNS DESCRIPTION <code>float</code> <p>The difference of the two numbers.</p> <p> TYPE: <code>float</code> </p> Source code in <code>src/core/calculator.py</code> <pre><code>def subtract(a: float, b: float) -&gt; float:\n    \"\"\"\n    Return the difference of two numbers.\n\n    Args:\n        a (float): The first number.\n        b (float): The second number.\n\n    Returns:\n        float: The difference of the two numbers.\n    \"\"\"\n    return a - b\n</code></pre>"},{"location":"reference/core/#src.core.calculator.multiply","title":"<code>multiply(a, b)</code>","text":"<p>Return the product of two numbers.</p> PARAMETER DESCRIPTION <code>a</code> <p>The first number.</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>The second number.</p> <p> TYPE: <code>float</code> </p> RETURNS DESCRIPTION <code>float</code> <p>The product of the two numbers.</p> <p> TYPE: <code>float</code> </p> Source code in <code>src/core/calculator.py</code> <pre><code>def multiply(a: float, b: float) -&gt; float:\n    \"\"\"\n    Return the product of two numbers.\n\n    Args:\n        a (float): The first number.\n        b (float): The second number.\n\n    Returns:\n        float: The product of the two numbers.\n    \"\"\"\n    return a * b\n</code></pre>"},{"location":"reference/core/#src.core.calculator.divide","title":"<code>divide(a, b)</code>","text":"<p>Return the division of two numbers. Raise an error if dividing by zero.</p> PARAMETER DESCRIPTION <code>a</code> <p>The numerator.</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>The denominator.</p> <p> TYPE: <code>float</code> </p> RETURNS DESCRIPTION <code>float</code> <p>The result of the division.</p> <p> TYPE: <code>float</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>If the denominator is zero.</p> Source code in <code>src/core/calculator.py</code> <pre><code>def divide(a: float, b: float) -&gt; float:\n    \"\"\"\n    Return the division of two numbers. Raise an error if dividing by zero.\n\n    Args:\n        a (float): The numerator.\n        b (float): The denominator.\n\n    Returns:\n        float: The result of the division.\n\n    Raises:\n        ValueError: If the denominator is zero.\n    \"\"\"\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    return a / b\n</code></pre>"},{"location":"tutorials/getting-started/","title":"Getting Started","text":"<p>This tutorial will guide you through setting up and running the Python Template project.</p>"},{"location":"tutorials/getting-started/#steps","title":"Steps","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone &lt;repository-url&gt;\ncd python-template\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code>uv pip install -r pyproject.toml --all-extras\n</code></pre></p> </li> <li> <p>Install pre-commit hooks: <pre><code>pre-commit install\n</code></pre></p> </li> </ol>"}]}