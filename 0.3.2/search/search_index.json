{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python project template This documentation is structured using the Di\u00e1taxis framework to help you navigate and understand the project effectively. If you are setting up a new project using this template, you probably want to have a look at the Getting Started section.","title":"Home"},{"location":"#python-project-template","text":"This documentation is structured using the Di\u00e1taxis framework to help you navigate and understand the project effectively. If you are setting up a new project using this template, you probably want to have a look at the Getting Started section.","title":"Python project template"},{"location":"explanation/aim-of-project/","text":"Aim of the Project This project serves as a cookie cutter template for starting new Python projects. It is designed to incorporate the most up-to-date tools and best practices, enabling developers to quickly set up a robust and modern Python development environment.","title":"Aim of the Project"},{"location":"explanation/aim-of-project/#aim-of-the-project","text":"This project serves as a cookie cutter template for starting new Python projects. It is designed to incorporate the most up-to-date tools and best practices, enabling developers to quickly set up a robust and modern Python development environment.","title":"Aim of the Project"},{"location":"explanation/project-structure/","text":"Project Structure This document explains the structure of the Python Template project. Overview The project is organized as follows: python-template/ \u251c\u2500\u2500 cli/ # Command-line interface \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __main__.py \u2502 \u2514\u2500\u2500 calculator.py \u251c\u2500\u2500 core/ # Core functionality \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 calculator.py \u251c\u2500\u2500 tests/ # Unit tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 test_calculator.py \u2502 \u2514\u2500\u2500 test_async_stuff.py \u251c\u2500\u2500 docs/ # Documentation \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 main.py # Entry point \u251c\u2500\u2500 pyproject.toml # Project configuration \u2514\u2500\u2500 README.md # Project overview Key Components CLI: Provides a command-line interface using typer . Core: Contains the core logic for the calculator. Tests: Includes unit tests for the project. Docs: Contains documentation files for the project.","title":"Project Structure"},{"location":"explanation/project-structure/#project-structure","text":"This document explains the structure of the Python Template project.","title":"Project Structure"},{"location":"explanation/project-structure/#overview","text":"The project is organized as follows: python-template/ \u251c\u2500\u2500 cli/ # Command-line interface \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __main__.py \u2502 \u2514\u2500\u2500 calculator.py \u251c\u2500\u2500 core/ # Core functionality \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 calculator.py \u251c\u2500\u2500 tests/ # Unit tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 test_calculator.py \u2502 \u2514\u2500\u2500 test_async_stuff.py \u251c\u2500\u2500 docs/ # Documentation \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 main.py # Entry point \u251c\u2500\u2500 pyproject.toml # Project configuration \u2514\u2500\u2500 README.md # Project overview","title":"Overview"},{"location":"explanation/project-structure/#key-components","text":"CLI: Provides a command-line interface using typer . Core: Contains the core logic for the calculator. Tests: Includes unit tests for the project. Docs: Contains documentation files for the project.","title":"Key Components"},{"location":"how-to/build-docs/","text":"How to Build Documentation This guide explains how to build the documentation for the project. Steps Install MkDocs and its dependencies: sh uv pip install -r pyproject.toml --all-extras Serve the documentation locally: sh mkdocs serve Build the documentation: sh mkdocs build The built documentation will be available in the site/ directory.","title":"Build Documentation"},{"location":"how-to/build-docs/#how-to-build-documentation","text":"This guide explains how to build the documentation for the project.","title":"How to Build Documentation"},{"location":"how-to/build-docs/#steps","text":"Install MkDocs and its dependencies: sh uv pip install -r pyproject.toml --all-extras Serve the documentation locally: sh mkdocs serve Build the documentation: sh mkdocs build The built documentation will be available in the site/ directory.","title":"Steps"},{"location":"how-to/bump-version/","text":"How to bump version Run commitizen bump: cz bump It will automatically calculate the version increment from the past commit messages.","title":"How to bump version"},{"location":"how-to/bump-version/#how-to-bump-version","text":"Run commitizen bump: cz bump It will automatically calculate the version increment from the past commit messages.","title":"How to bump version"},{"location":"how-to/dependencies/","text":"Dependency management Use uv -- it's basically a Cargo for python, written in rust Add a dependency: uv add ruff Add a dependency to the optional \"dev\" group: uv add ruff --optional dev Create a new lockfile: uv lock Pass --upgrade to upgrade: uv lock --upgrade Install dependencies: (this will only install the core dependencies) uv pip install -r pyproject.toml Install extra dependencies defined in project.optional-dependencies : uv pip install -r pyproject.toml --all-extras","title":"Manage Dependencies"},{"location":"how-to/dependencies/#dependency-management","text":"Use uv -- it's basically a Cargo for python, written in rust Add a dependency: uv add ruff Add a dependency to the optional \"dev\" group: uv add ruff --optional dev Create a new lockfile: uv lock Pass --upgrade to upgrade: uv lock --upgrade Install dependencies: (this will only install the core dependencies) uv pip install -r pyproject.toml Install extra dependencies defined in project.optional-dependencies : uv pip install -r pyproject.toml --all-extras","title":"Dependency management"},{"location":"how-to/testing/","text":"Testing Run all tests Running all tests should be as simple as this: pytest Run specific tests Run only tests which have \"foo\" in the file or function name: pytest -k foo Watch tests To automatically re-run tests while you are working on them, use pytest-watcher ( q to quit): ptw . You can also watch specific tests using the -k flag: ptw . -k foo By default, tests are re-run 0.2 seconds after the last file edit. To increase the delay, pass --delay : ptw . --delay 5 Getting test coverage Terminal To see the test coverage, add --cov to any of the above commands. For example, this will output the coverage report to the terminal: pytest --cov HTML report To see a browsable HTML report: pytest --cov --cov-report=html && xdg-open htmlcov/index.html You can watch HTML coverage by running: ptw . --cov --cov-report=html and opening htmlcov/index.html in your browser. To watch coverage for a specific test: ptw . -k foo --cov --cov-report=html The tests may \"fail\" because the tests matching foo will be expected to provide coverage for the whole project. But you can open htmlcov/index.html in your browser and browse to just the relevant file.","title":"Running tests"},{"location":"how-to/testing/#testing","text":"","title":"Testing"},{"location":"how-to/testing/#run-all-tests","text":"Running all tests should be as simple as this: pytest","title":"Run all tests"},{"location":"how-to/testing/#run-specific-tests","text":"Run only tests which have \"foo\" in the file or function name: pytest -k foo","title":"Run specific tests"},{"location":"how-to/testing/#watch-tests","text":"To automatically re-run tests while you are working on them, use pytest-watcher ( q to quit): ptw . You can also watch specific tests using the -k flag: ptw . -k foo By default, tests are re-run 0.2 seconds after the last file edit. To increase the delay, pass --delay : ptw . --delay 5","title":"Watch tests"},{"location":"how-to/testing/#getting-test-coverage","text":"","title":"Getting test coverage"},{"location":"how-to/testing/#terminal","text":"To see the test coverage, add --cov to any of the above commands. For example, this will output the coverage report to the terminal: pytest --cov","title":"Terminal"},{"location":"how-to/testing/#html-report","text":"To see a browsable HTML report: pytest --cov --cov-report=html && xdg-open htmlcov/index.html You can watch HTML coverage by running: ptw . --cov --cov-report=html and opening htmlcov/index.html in your browser. To watch coverage for a specific test: ptw . -k foo --cov --cov-report=html The tests may \"fail\" because the tests matching foo will be expected to provide coverage for the whole project. But you can open htmlcov/index.html in your browser and browse to just the relevant file.","title":"HTML report"},{"location":"reference/calculator/","text":"Calculator Module add ( a , b ) Return the sum of two numbers. Parameters: a ( float ) \u2013 The first number. b ( float ) \u2013 The second number. Returns: float ( float ) \u2013 The sum of the two numbers. Source code in core/calculator.py 3 4 5 6 7 8 9 10 11 12 13 14 def add ( a : float , b : float ) -> float : \"\"\" Return the sum of two numbers. Args: a (float): The first number. b (float): The second number. Returns: float: The sum of the two numbers. \"\"\" return a + b divide ( a , b ) Return the division of two numbers. Raise an error if dividing by zero. Parameters: a ( float ) \u2013 The numerator. b ( float ) \u2013 The denominator. Returns: float ( float ) \u2013 The result of the division. Raises: ValueError \u2013 If the denominator is zero. Source code in core/calculator.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def divide ( a : float , b : float ) -> float : \"\"\" Return the division of two numbers. Raise an error if dividing by zero. Args: a (float): The numerator. b (float): The denominator. Returns: float: The result of the division. Raises: ValueError: If the denominator is zero. \"\"\" if b == 0 : raise ValueError ( \"Cannot divide by zero.\" ) return a / b multiply ( a , b ) Return the product of two numbers. Parameters: a ( float ) \u2013 The first number. b ( float ) \u2013 The second number. Returns: float ( float ) \u2013 The product of the two numbers. Source code in core/calculator.py 29 30 31 32 33 34 35 36 37 38 39 40 def multiply ( a : float , b : float ) -> float : \"\"\" Return the product of two numbers. Args: a (float): The first number. b (float): The second number. Returns: float: The product of the two numbers. \"\"\" return a * b subtract ( a , b ) Return the difference of two numbers. Parameters: a ( float ) \u2013 The first number. b ( float ) \u2013 The second number. Returns: float ( float ) \u2013 The difference of the two numbers. Source code in core/calculator.py 16 17 18 19 20 21 22 23 24 25 26 27 def subtract ( a : float , b : float ) -> float : \"\"\" Return the difference of two numbers. Args: a (float): The first number. b (float): The second number. Returns: float: The difference of the two numbers. \"\"\" return a - b CLI Calculator Module This module provides CLI commands for performing basic arithmetic operations. It uses the typer library to define commands for addition, subtraction, multiplication, and division. Each command takes two numbers as input and prints the result to the console. The module relies on the core.calculator module for the actual arithmetic operations. add ( a , b ) Add two numbers. Parameters: a ( float ) \u2013 The first number to add. b ( float ) \u2013 The second number to add. Source code in cli/calculator.py 16 17 18 19 20 21 22 23 24 25 26 @app . command () def add ( a : float , b : float ) -> None : \"\"\" Add two numbers. Args: a (float): The first number to add. b (float): The second number to add. \"\"\" result = calculator . add ( a , b ) typer . echo ( f \"The result of addition is: { result } \" ) divide ( a , b ) Divide two numbers. Parameters: a ( float ) \u2013 The numerator. b ( float ) \u2013 The denominator. Source code in cli/calculator.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 @app . command () def divide ( a : float , b : float ) -> None : \"\"\" Divide two numbers. Args: a (float): The numerator. b (float): The denominator. \"\"\" try : result = calculator . divide ( a , b ) typer . echo ( f \"The result of division is: { result } \" ) except ValueError as e : typer . echo ( f \"Error: { e } \" ) main ( version = typer . Option ( None , '--version' , '-v' , help = \"Show the application's version and exit.\" , callback = _version_callback , is_eager = True )) Handles the --version flag Source code in cli/calculator.py 73 74 75 76 77 78 79 80 81 82 83 84 85 @app . callback () def main ( version : Optional [ bool ] = typer . Option ( None , \"--version\" , \"-v\" , help = \"Show the application's version and exit.\" , callback = _version_callback , is_eager = True , ), ) -> None : \"\"\"Handles the --version flag\"\"\" return multiply ( a , b ) Multiply two numbers. Parameters: a ( float ) \u2013 The first number to multiply. b ( float ) \u2013 The second number to multiply. Source code in cli/calculator.py 40 41 42 43 44 45 46 47 48 49 50 @app . command () def multiply ( a : float , b : float ) -> None : \"\"\" Multiply two numbers. Args: a (float): The first number to multiply. b (float): The second number to multiply. \"\"\" result = calculator . multiply ( a , b ) typer . echo ( f \"The result of multiplication is: { result } \" ) subtract ( a , b ) Subtract two numbers. Parameters: a ( float ) \u2013 The number to subtract from. b ( float ) \u2013 The number to subtract. Source code in cli/calculator.py 28 29 30 31 32 33 34 35 36 37 38 @app . command () def subtract ( a : float , b : float ) -> None : \"\"\" Subtract two numbers. Args: a (float): The number to subtract from. b (float): The number to subtract. \"\"\" result = calculator . subtract ( a , b ) typer . echo ( f \"The result of subtraction is: { result } \" )","title":"Calculator Module"},{"location":"reference/calculator/#calculator-module","text":"","title":"Calculator Module"},{"location":"reference/calculator/#core.calculator.add","text":"Return the sum of two numbers. Parameters: a ( float ) \u2013 The first number. b ( float ) \u2013 The second number. Returns: float ( float ) \u2013 The sum of the two numbers. Source code in core/calculator.py 3 4 5 6 7 8 9 10 11 12 13 14 def add ( a : float , b : float ) -> float : \"\"\" Return the sum of two numbers. Args: a (float): The first number. b (float): The second number. Returns: float: The sum of the two numbers. \"\"\" return a + b","title":"add"},{"location":"reference/calculator/#core.calculator.divide","text":"Return the division of two numbers. Raise an error if dividing by zero. Parameters: a ( float ) \u2013 The numerator. b ( float ) \u2013 The denominator. Returns: float ( float ) \u2013 The result of the division. Raises: ValueError \u2013 If the denominator is zero. Source code in core/calculator.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def divide ( a : float , b : float ) -> float : \"\"\" Return the division of two numbers. Raise an error if dividing by zero. Args: a (float): The numerator. b (float): The denominator. Returns: float: The result of the division. Raises: ValueError: If the denominator is zero. \"\"\" if b == 0 : raise ValueError ( \"Cannot divide by zero.\" ) return a / b","title":"divide"},{"location":"reference/calculator/#core.calculator.multiply","text":"Return the product of two numbers. Parameters: a ( float ) \u2013 The first number. b ( float ) \u2013 The second number. Returns: float ( float ) \u2013 The product of the two numbers. Source code in core/calculator.py 29 30 31 32 33 34 35 36 37 38 39 40 def multiply ( a : float , b : float ) -> float : \"\"\" Return the product of two numbers. Args: a (float): The first number. b (float): The second number. Returns: float: The product of the two numbers. \"\"\" return a * b","title":"multiply"},{"location":"reference/calculator/#core.calculator.subtract","text":"Return the difference of two numbers. Parameters: a ( float ) \u2013 The first number. b ( float ) \u2013 The second number. Returns: float ( float ) \u2013 The difference of the two numbers. Source code in core/calculator.py 16 17 18 19 20 21 22 23 24 25 26 27 def subtract ( a : float , b : float ) -> float : \"\"\" Return the difference of two numbers. Args: a (float): The first number. b (float): The second number. Returns: float: The difference of the two numbers. \"\"\" return a - b","title":"subtract"},{"location":"reference/calculator/#cli-calculator-module","text":"This module provides CLI commands for performing basic arithmetic operations. It uses the typer library to define commands for addition, subtraction, multiplication, and division. Each command takes two numbers as input and prints the result to the console. The module relies on the core.calculator module for the actual arithmetic operations.","title":"CLI Calculator Module"},{"location":"reference/calculator/#cli.calculator.add","text":"Add two numbers. Parameters: a ( float ) \u2013 The first number to add. b ( float ) \u2013 The second number to add. Source code in cli/calculator.py 16 17 18 19 20 21 22 23 24 25 26 @app . command () def add ( a : float , b : float ) -> None : \"\"\" Add two numbers. Args: a (float): The first number to add. b (float): The second number to add. \"\"\" result = calculator . add ( a , b ) typer . echo ( f \"The result of addition is: { result } \" )","title":"add"},{"location":"reference/calculator/#cli.calculator.divide","text":"Divide two numbers. Parameters: a ( float ) \u2013 The numerator. b ( float ) \u2013 The denominator. Source code in cli/calculator.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 @app . command () def divide ( a : float , b : float ) -> None : \"\"\" Divide two numbers. Args: a (float): The numerator. b (float): The denominator. \"\"\" try : result = calculator . divide ( a , b ) typer . echo ( f \"The result of division is: { result } \" ) except ValueError as e : typer . echo ( f \"Error: { e } \" )","title":"divide"},{"location":"reference/calculator/#cli.calculator.main","text":"Handles the --version flag Source code in cli/calculator.py 73 74 75 76 77 78 79 80 81 82 83 84 85 @app . callback () def main ( version : Optional [ bool ] = typer . Option ( None , \"--version\" , \"-v\" , help = \"Show the application's version and exit.\" , callback = _version_callback , is_eager = True , ), ) -> None : \"\"\"Handles the --version flag\"\"\" return","title":"main"},{"location":"reference/calculator/#cli.calculator.multiply","text":"Multiply two numbers. Parameters: a ( float ) \u2013 The first number to multiply. b ( float ) \u2013 The second number to multiply. Source code in cli/calculator.py 40 41 42 43 44 45 46 47 48 49 50 @app . command () def multiply ( a : float , b : float ) -> None : \"\"\" Multiply two numbers. Args: a (float): The first number to multiply. b (float): The second number to multiply. \"\"\" result = calculator . multiply ( a , b ) typer . echo ( f \"The result of multiplication is: { result } \" )","title":"multiply"},{"location":"reference/calculator/#cli.calculator.subtract","text":"Subtract two numbers. Parameters: a ( float ) \u2013 The number to subtract from. b ( float ) \u2013 The number to subtract. Source code in cli/calculator.py 28 29 30 31 32 33 34 35 36 37 38 @app . command () def subtract ( a : float , b : float ) -> None : \"\"\" Subtract two numbers. Args: a (float): The number to subtract from. b (float): The number to subtract. \"\"\" result = calculator . subtract ( a , b ) typer . echo ( f \"The result of subtraction is: { result } \" )","title":"subtract"},{"location":"reference/cli/calculator/","text":"CLI Calculator Module This module provides CLI commands for performing basic arithmetic operations. It uses the typer library to define commands for addition, subtraction, multiplication, and division. Each command takes two numbers as input and prints the result to the console. The module relies on the core.calculator module for the actual arithmetic operations. add ( a , b ) Add two numbers. Parameters: a ( float ) \u2013 The first number to add. b ( float ) \u2013 The second number to add. Source code in cli/calculator.py 16 17 18 19 20 21 22 23 24 25 26 @app . command () def add ( a : float , b : float ) -> None : \"\"\" Add two numbers. Args: a (float): The first number to add. b (float): The second number to add. \"\"\" result = calculator . add ( a , b ) typer . echo ( f \"The result of addition is: { result } \" ) divide ( a , b ) Divide two numbers. Parameters: a ( float ) \u2013 The numerator. b ( float ) \u2013 The denominator. Source code in cli/calculator.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 @app . command () def divide ( a : float , b : float ) -> None : \"\"\" Divide two numbers. Args: a (float): The numerator. b (float): The denominator. \"\"\" try : result = calculator . divide ( a , b ) typer . echo ( f \"The result of division is: { result } \" ) except ValueError as e : typer . echo ( f \"Error: { e } \" ) main ( version = typer . Option ( None , '--version' , '-v' , help = \"Show the application's version and exit.\" , callback = _version_callback , is_eager = True )) Handles the --version flag Source code in cli/calculator.py 73 74 75 76 77 78 79 80 81 82 83 84 85 @app . callback () def main ( version : Optional [ bool ] = typer . Option ( None , \"--version\" , \"-v\" , help = \"Show the application's version and exit.\" , callback = _version_callback , is_eager = True , ), ) -> None : \"\"\"Handles the --version flag\"\"\" return multiply ( a , b ) Multiply two numbers. Parameters: a ( float ) \u2013 The first number to multiply. b ( float ) \u2013 The second number to multiply. Source code in cli/calculator.py 40 41 42 43 44 45 46 47 48 49 50 @app . command () def multiply ( a : float , b : float ) -> None : \"\"\" Multiply two numbers. Args: a (float): The first number to multiply. b (float): The second number to multiply. \"\"\" result = calculator . multiply ( a , b ) typer . echo ( f \"The result of multiplication is: { result } \" ) subtract ( a , b ) Subtract two numbers. Parameters: a ( float ) \u2013 The number to subtract from. b ( float ) \u2013 The number to subtract. Source code in cli/calculator.py 28 29 30 31 32 33 34 35 36 37 38 @app . command () def subtract ( a : float , b : float ) -> None : \"\"\" Subtract two numbers. Args: a (float): The number to subtract from. b (float): The number to subtract. \"\"\" result = calculator . subtract ( a , b ) typer . echo ( f \"The result of subtraction is: { result } \" )","title":"Calculator"},{"location":"reference/cli/calculator/#cli-calculator-module","text":"This module provides CLI commands for performing basic arithmetic operations. It uses the typer library to define commands for addition, subtraction, multiplication, and division. Each command takes two numbers as input and prints the result to the console. The module relies on the core.calculator module for the actual arithmetic operations.","title":"CLI Calculator Module"},{"location":"reference/cli/calculator/#cli.calculator.add","text":"Add two numbers. Parameters: a ( float ) \u2013 The first number to add. b ( float ) \u2013 The second number to add. Source code in cli/calculator.py 16 17 18 19 20 21 22 23 24 25 26 @app . command () def add ( a : float , b : float ) -> None : \"\"\" Add two numbers. Args: a (float): The first number to add. b (float): The second number to add. \"\"\" result = calculator . add ( a , b ) typer . echo ( f \"The result of addition is: { result } \" )","title":"add"},{"location":"reference/cli/calculator/#cli.calculator.divide","text":"Divide two numbers. Parameters: a ( float ) \u2013 The numerator. b ( float ) \u2013 The denominator. Source code in cli/calculator.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 @app . command () def divide ( a : float , b : float ) -> None : \"\"\" Divide two numbers. Args: a (float): The numerator. b (float): The denominator. \"\"\" try : result = calculator . divide ( a , b ) typer . echo ( f \"The result of division is: { result } \" ) except ValueError as e : typer . echo ( f \"Error: { e } \" )","title":"divide"},{"location":"reference/cli/calculator/#cli.calculator.main","text":"Handles the --version flag Source code in cli/calculator.py 73 74 75 76 77 78 79 80 81 82 83 84 85 @app . callback () def main ( version : Optional [ bool ] = typer . Option ( None , \"--version\" , \"-v\" , help = \"Show the application's version and exit.\" , callback = _version_callback , is_eager = True , ), ) -> None : \"\"\"Handles the --version flag\"\"\" return","title":"main"},{"location":"reference/cli/calculator/#cli.calculator.multiply","text":"Multiply two numbers. Parameters: a ( float ) \u2013 The first number to multiply. b ( float ) \u2013 The second number to multiply. Source code in cli/calculator.py 40 41 42 43 44 45 46 47 48 49 50 @app . command () def multiply ( a : float , b : float ) -> None : \"\"\" Multiply two numbers. Args: a (float): The first number to multiply. b (float): The second number to multiply. \"\"\" result = calculator . multiply ( a , b ) typer . echo ( f \"The result of multiplication is: { result } \" )","title":"multiply"},{"location":"reference/cli/calculator/#cli.calculator.subtract","text":"Subtract two numbers. Parameters: a ( float ) \u2013 The number to subtract from. b ( float ) \u2013 The number to subtract. Source code in cli/calculator.py 28 29 30 31 32 33 34 35 36 37 38 @app . command () def subtract ( a : float , b : float ) -> None : \"\"\" Subtract two numbers. Args: a (float): The number to subtract from. b (float): The number to subtract. \"\"\" result = calculator . subtract ( a , b ) typer . echo ( f \"The result of subtraction is: { result } \" )","title":"subtract"},{"location":"reference/core/calculator/","text":"Calculator Module add ( a , b ) Return the sum of two numbers. Parameters: a ( float ) \u2013 The first number. b ( float ) \u2013 The second number. Returns: float ( float ) \u2013 The sum of the two numbers. Source code in core/calculator.py 3 4 5 6 7 8 9 10 11 12 13 14 def add ( a : float , b : float ) -> float : \"\"\" Return the sum of two numbers. Args: a (float): The first number. b (float): The second number. Returns: float: The sum of the two numbers. \"\"\" return a + b divide ( a , b ) Return the division of two numbers. Raise an error if dividing by zero. Parameters: a ( float ) \u2013 The numerator. b ( float ) \u2013 The denominator. Returns: float ( float ) \u2013 The result of the division. Raises: ValueError \u2013 If the denominator is zero. Source code in core/calculator.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def divide ( a : float , b : float ) -> float : \"\"\" Return the division of two numbers. Raise an error if dividing by zero. Args: a (float): The numerator. b (float): The denominator. Returns: float: The result of the division. Raises: ValueError: If the denominator is zero. \"\"\" if b == 0 : raise ValueError ( \"Cannot divide by zero.\" ) return a / b multiply ( a , b ) Return the product of two numbers. Parameters: a ( float ) \u2013 The first number. b ( float ) \u2013 The second number. Returns: float ( float ) \u2013 The product of the two numbers. Source code in core/calculator.py 29 30 31 32 33 34 35 36 37 38 39 40 def multiply ( a : float , b : float ) -> float : \"\"\" Return the product of two numbers. Args: a (float): The first number. b (float): The second number. Returns: float: The product of the two numbers. \"\"\" return a * b subtract ( a , b ) Return the difference of two numbers. Parameters: a ( float ) \u2013 The first number. b ( float ) \u2013 The second number. Returns: float ( float ) \u2013 The difference of the two numbers. Source code in core/calculator.py 16 17 18 19 20 21 22 23 24 25 26 27 def subtract ( a : float , b : float ) -> float : \"\"\" Return the difference of two numbers. Args: a (float): The first number. b (float): The second number. Returns: float: The difference of the two numbers. \"\"\" return a - b","title":"Calculator"},{"location":"reference/core/calculator/#calculator-module","text":"","title":"Calculator Module"},{"location":"reference/core/calculator/#core.calculator.add","text":"Return the sum of two numbers. Parameters: a ( float ) \u2013 The first number. b ( float ) \u2013 The second number. Returns: float ( float ) \u2013 The sum of the two numbers. Source code in core/calculator.py 3 4 5 6 7 8 9 10 11 12 13 14 def add ( a : float , b : float ) -> float : \"\"\" Return the sum of two numbers. Args: a (float): The first number. b (float): The second number. Returns: float: The sum of the two numbers. \"\"\" return a + b","title":"add"},{"location":"reference/core/calculator/#core.calculator.divide","text":"Return the division of two numbers. Raise an error if dividing by zero. Parameters: a ( float ) \u2013 The numerator. b ( float ) \u2013 The denominator. Returns: float ( float ) \u2013 The result of the division. Raises: ValueError \u2013 If the denominator is zero. Source code in core/calculator.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def divide ( a : float , b : float ) -> float : \"\"\" Return the division of two numbers. Raise an error if dividing by zero. Args: a (float): The numerator. b (float): The denominator. Returns: float: The result of the division. Raises: ValueError: If the denominator is zero. \"\"\" if b == 0 : raise ValueError ( \"Cannot divide by zero.\" ) return a / b","title":"divide"},{"location":"reference/core/calculator/#core.calculator.multiply","text":"Return the product of two numbers. Parameters: a ( float ) \u2013 The first number. b ( float ) \u2013 The second number. Returns: float ( float ) \u2013 The product of the two numbers. Source code in core/calculator.py 29 30 31 32 33 34 35 36 37 38 39 40 def multiply ( a : float , b : float ) -> float : \"\"\" Return the product of two numbers. Args: a (float): The first number. b (float): The second number. Returns: float: The product of the two numbers. \"\"\" return a * b","title":"multiply"},{"location":"reference/core/calculator/#core.calculator.subtract","text":"Return the difference of two numbers. Parameters: a ( float ) \u2013 The first number. b ( float ) \u2013 The second number. Returns: float ( float ) \u2013 The difference of the two numbers. Source code in core/calculator.py 16 17 18 19 20 21 22 23 24 25 26 27 def subtract ( a : float , b : float ) -> float : \"\"\" Return the difference of two numbers. Args: a (float): The first number. b (float): The second number. Returns: float: The difference of the two numbers. \"\"\" return a - b","title":"subtract"},{"location":"tutorials/getting-started/","text":"Getting Started with Python Template This tutorial will guide you through setting up and running the Python Template project. Prerequisites Python 3.14 installed uv dependency manager installed Steps Clone the repository: sh git clone <repository-url> cd python-template Install dependencies: sh uv pip install -r pyproject.toml --all-extras Install pre-commit hooks: sh pre-commit install","title":"Getting Started"},{"location":"tutorials/getting-started/#getting-started-with-python-template","text":"This tutorial will guide you through setting up and running the Python Template project.","title":"Getting Started with Python Template"},{"location":"tutorials/getting-started/#prerequisites","text":"Python 3.14 installed uv dependency manager installed","title":"Prerequisites"},{"location":"tutorials/getting-started/#steps","text":"Clone the repository: sh git clone <repository-url> cd python-template Install dependencies: sh uv pip install -r pyproject.toml --all-extras Install pre-commit hooks: sh pre-commit install","title":"Steps"}]}